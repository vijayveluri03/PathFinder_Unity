#define ONE_WAY_LOGIC

using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace Mr1
{
    public enum PathLineType
    {
        Straight,
        CatmullRomCurve,
        BezierCurve,
    }

    [System.Serializable]
    public class WayPoint 
    {
        public WayPoint ( Vector3 pos ) { position = pos; }
        [SerializeField] public Vector3 position;
        [SerializeField] public int autoGeneratedID = -1;
        [HideInInspector] public WayPoint previousWayPoint;
        [HideInInspector] public float  HeuristicDistance;
        [HideInInspector] public float  pathDistance;
        [HideInInspector] public float combinedHeuristic { get {return pathDistance + HeuristicDistance;}}
    }

    [System.Serializable]
    public class WayPath 
    {
        public WayPath ( int a, int b ) { IDOfA = a; IDOfB = b; }
        [SerializeField] public int cost;
        
        [SerializeField] public int autoGeneratedID;
        [SerializeField] public int IDOfA = -1;
        [SerializeField] public int IDOfB = -1;

#if ONE_WAY_LOGIC
        public bool isOneWay = false;       
#endif
    }


    public class PathData : ScriptableObject
    {
        public bool bShowPath;

        [SerializeField] public string pathName;
        [SerializeField] public PathLineType lineType;
        [SerializeField] public Color lineColor = Color.yellow;
        [SerializeField] public float pointSize = 0.5f;

        [SerializeField] public List<WayPoint> points;
        [SerializeField] public List<WayPath> paths;

        [HideInInspector] public Dictionary<int, WayPoint> pointsSorted;
        [HideInInspector] public Dictionary<int, WayPath> pathsSorted;

        public PathData()
        {
            points = new List<WayPoint>();
            paths = new List<WayPath>();
            pointsSorted = new Dictionary<int, WayPoint>();
            pathsSorted = new Dictionary<int, WayPath>(); 
        }

        public void Refresh ( )
        {
            if ( points == null )
                return;

            //Generate IDs for way points
            {
                int maxID = 0;
                
                for ( int i = 0; i < points.Count; i++  )
                {
                    if ( points[i].autoGeneratedID > maxID ) 
                        maxID = points[i].autoGeneratedID;
                }

                maxID = maxID + 1;

                for ( int i = 0; i < points.Count; i++  )
                {
                    if ( points[i].autoGeneratedID <= 0  ) 
                        points[i].autoGeneratedID = maxID++;
                }
            }

            // generate IDs for way paths.
            {
                int maxID = 0;
                for ( int i = 0; i < paths.Count; i++  )
                {
                    if ( paths[i].autoGeneratedID > maxID ) 
                        maxID = paths[i].autoGeneratedID;
                }

                maxID = maxID + 1;

                for ( int i = 0; i < paths.Count; i++  )
                {
                    if ( paths[i].autoGeneratedID <= 0  ) 
                        paths[i].autoGeneratedID = maxID++;
                }
            }

            // refreshing dictionaries
            {
                pathsSorted.Clear();
                pointsSorted.Clear();

                for ( int i = 0; i < points.Count; i++  )
                {
                    pointsSorted[ points[i].autoGeneratedID ] = points[i] ;
                }

                for ( int i = 0; i < paths.Count; i++  )
                {
                    pathsSorted[ paths[i].autoGeneratedID ] = paths[i] ;
                }
            }
        }

    }
}